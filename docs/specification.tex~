\documentclass{article}
\usepackage{hyperref}
\title{Specification Document}
\author{Omkar Girish Kamath}
\begin{document}
  \maketitle
  \tableofcontents
  \date
  \vspace*{8cm}
  \section{\textbf{Introduction}}
  This specification document outlines the design ,features ,functions
  and installation of the \textbf{Dynamically Linked Library of Linked
    List Functions}. The library is designed to provide commonly used
  operations for creating and manipulating linked lists. The library
  is written in C programming language and will be compatible with
  Linux operating systems. The appropriate Makefile utility files are
  written and provided as well with the library to ensure smooth and
  hiccup-less usage of the library. 
  \section{\textbf{Installation in Linux Systems}}
  \subsection{Introduction to DLLs} Dynamically linked libraries (DLLs) are shared libraries that contain compiled code and data that can be linked and loaded into a program at run-time, rather than at compile-time. In contrast, static libraries are linked and loaded into the program at compile-time.

When a program is dynamically linked to a DLL, the program will load the DLL into memory at runtime and resolve any unresolved external symbols, such as function names, that are referenced in the program code. This allows multiple programs to share the same DLL, reducing memory usage and making updates to the library easier.
The process of using a DLL in a program involves a few steps.
The program code contains references to functions or data that are defined in the DLL.
The program is compiled with references to the DLL.
The program can call functions and access data in the DLL as needed.
\subsection{Setting the Environment Variables}
The gcc linker looks for the shared object (.so) file and to not
mention the path explicitly for the linker to look , we need to add
the directory containing the shared object (.so) file to the
environment variable \$LD\_LIBRARY\_PATH. But to ensure that the
environment variable remembers it even after system reboots , we need
to change the configuration file of the user shell. For the sake of
example the \textbf{Bourne Again Shell (bash)} is considered.
  \section{\textbf{Intended Usage and Working of The Library}}
  \subsection{Makefile}
  \subsection{Compilation of the File}
  \section{\textbf{Function Descriptions and their Purpose}}
\end{document}
